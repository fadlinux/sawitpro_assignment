// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/fadlinux/sawitpro_assignment/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateEstate mocks base method.
func (m *MockRepositoryInterface) CreateEstate(ctx context.Context, request model.Estate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstate", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEstate indicates an expected call of CreateEstate.
func (mr *MockRepositoryInterfaceMockRecorder) CreateEstate(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateEstate), ctx, request)
}

// CreateStats mocks base method.
func (m *MockRepositoryInterface) CreateStats(ctx context.Context, request model.Stats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStats", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStats indicates an expected call of CreateStats.
func (mr *MockRepositoryInterfaceMockRecorder) CreateStats(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStats", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateStats), ctx, request)
}

// CreateTree mocks base method.
func (m *MockRepositoryInterface) CreateTree(ctx context.Context, request model.Tree) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTree", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTree indicates an expected call of CreateTree.
func (mr *MockRepositoryInterfaceMockRecorder) CreateTree(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTree", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateTree), ctx, request)
}

// FindAllTreeByEstateId mocks base method.
func (m *MockRepositoryInterface) FindAllTreeByEstateId(ctx context.Context, estateId uuid.UUID) ([]model.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTreeByEstateId", ctx, estateId)
	ret0, _ := ret[0].([]model.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTreeByEstateId indicates an expected call of FindAllTreeByEstateId.
func (mr *MockRepositoryInterfaceMockRecorder) FindAllTreeByEstateId(ctx, estateId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTreeByEstateId", reflect.TypeOf((*MockRepositoryInterface)(nil).FindAllTreeByEstateId), ctx, estateId)
}

// FindEstateById mocks base method.
func (m *MockRepositoryInterface) FindEstateById(ctx context.Context, id uuid.UUID) (model.Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEstateById", ctx, id)
	ret0, _ := ret[0].(model.Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEstateById indicates an expected call of FindEstateById.
func (mr *MockRepositoryInterfaceMockRecorder) FindEstateById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEstateById", reflect.TypeOf((*MockRepositoryInterface)(nil).FindEstateById), ctx, id)
}

// FindStatsByEstateId mocks base method.
func (m *MockRepositoryInterface) FindStatsByEstateId(ctx context.Context, id uuid.UUID) (FindStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatsByEstateId", ctx, id)
	ret0, _ := ret[0].(FindStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatsByEstateId indicates an expected call of FindStatsByEstateId.
func (mr *MockRepositoryInterfaceMockRecorder) FindStatsByEstateId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatsByEstateId", reflect.TypeOf((*MockRepositoryInterface)(nil).FindStatsByEstateId), ctx, id)
}

// FindTreeById mocks base method.
func (m *MockRepositoryInterface) FindTreeById(ctx context.Context, id uuid.UUID) (model.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTreeById", ctx, id)
	ret0, _ := ret[0].(model.Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTreeById indicates an expected call of FindTreeById.
func (mr *MockRepositoryInterfaceMockRecorder) FindTreeById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTreeById", reflect.TypeOf((*MockRepositoryInterface)(nil).FindTreeById), ctx, id)
}

// ListStatsByEstateId mocks base method.
func (m *MockRepositoryInterface) ListStatsByEstateId(ctx context.Context, id uuid.UUID) ([]model.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatsByEstateId", ctx, id)
	ret0, _ := ret[0].([]model.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatsByEstateId indicates an expected call of ListStatsByEstateId.
func (mr *MockRepositoryInterfaceMockRecorder) ListStatsByEstateId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatsByEstateId", reflect.TypeOf((*MockRepositoryInterface)(nil).ListStatsByEstateId), ctx, id)
}

// UpdateTree mocks base method.
func (m *MockRepositoryInterface) UpdateTree(ctx context.Context, request model.Tree) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTree", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTree indicates an expected call of UpdateTree.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateTree(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTree", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateTree), ctx, request)
}