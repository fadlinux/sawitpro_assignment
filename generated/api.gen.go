// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// CreateEstateRequest defines model for CreateEstateRequest.
type CreateEstateRequest struct {
	Length int `json:"length"`
	Width  int `json:"width"`
}

// CreateEstateResponse defines model for CreateEstateResponse.
type CreateEstateResponse struct {
	ID *string `json:"ID,omitempty"`
}

// CreateTreeRequest defines model for CreateTreeRequest.
type CreateTreeRequest struct {
	Height int    `json:"height"`
	Uuid   string `json:"uuid"`
	X      int    `json:"x"`
	Y      int    `json:"y"`
}

// CreateTreeResponse defines model for CreateTreeResponse.
type CreateTreeResponse struct {
	ID *string `json:"ID,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// GetDronePlanResponse defines model for GetDronePlanResponse.
type GetDronePlanResponse struct {
	Distance int `json:"distance"`
}

// GetStatsResponse defines model for GetStatsResponse.
type GetStatsResponse struct {
	Count  int    `json:"count"`
	Max    int    `json:"max"`
	Median string `json:"median"`
	Min    int    `json:"min"`
}

// CreateEstateJSONRequestBody defines body for CreateEstate for application/json ContentType.
type CreateEstateJSONRequestBody = CreateEstateRequest

// CreateTreeJSONRequestBody defines body for CreateTree for application/json ContentType.
type CreateTreeJSONRequestBody = CreateTreeRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// This Endpoint For Create Estate
	// (POST /estate)
	CreateEstate(ctx echo.Context) error
	// APIs for stores tree data in a given estate with the ID, It receives three positive integers x, y, and height
	// (POST /estate/tree)
	CreateTree(ctx echo.Context) error

	// (GET /estate/{Id}/drone-plan)
	GetDronePlan(ctx echo.Context, id string) error
	// APIs for will simply return the stats of the tree in the estate with ID
	// (GET /estate/{Id}stats)
	GetStats(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateEstate converts echo context to params.
func (w *ServerInterfaceWrapper) CreateEstate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateEstate(ctx)
	return err
}

// CreateTree converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTree(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTree(ctx)
	return err
}

// GetDronePlan converts echo context to params.
func (w *ServerInterfaceWrapper) GetDronePlan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDronePlan(ctx, id)
	return err
}

// GetStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStats(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/estate", wrapper.CreateEstate)
	router.POST(baseURL+"/estate/tree", wrapper.CreateTree)
	router.GET(baseURL+"/estate/:Id/drone-plan", wrapper.GetDronePlan)
	router.GET(baseURL+"/estate/:Idstats", wrapper.GetStats)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yXS3PbNhDHv8oO2iNtMqkdp7w1lZvhITOZ2j11dICIlYgMCSDAUo/R6Lt3AJJ6krLc",
	"1skhvlEUgP/u4rcPrlmuK6MVKnIsXTOXF1jx8Pi7RU5474gT/olfa3TkXxurDVqSGBaVqGZU+CdaGWQp",
	"k4pwhpZtIraQov+vTcQsfq2lRcHSv9t1UXfWOOo26MkXzMkfdWiLM1o5PDUmG+2pObJSzU7EpDgj8Ghx",
	"2NUC5aygflfrWooe7Ygt+9evLgjLkvl1Uafbijxl/AvE5t5abYdPrtA5PsOnj+8W9ml8RBpZrfBzydWw",
	"lJCOuMrxguhtlw6oPRAnN6yU61oN3HXFBy61QiG56sWgkuoCmxvRRqHZsz301Au/WaqpDlkoc2zdULzy",
	"qz5lj16XJJX+518OLTygncscWcTmaJ3UiqXszXVynfiV2qDiRrKU/RJeRcxwKkIsYgx5F4Kkm8zwoeIk",
	"tcoESw+ykzUuoaMPWqyaUCrCJpjcmFLmYWP8xWm1qzj+6WeLU5ayn+JdSYrbehT3FaPNYfzI1hheNHca",
	"TH+bvHkhE1pwgg0CXW6loSakj+gILFJtlQ/sTZL8byYcZmKP9gcuYBueiN1+S+1MEVrFy8AZWggbAuOu",
	"ripuVz42hXRwr4TRUhH8oS00UYUtPMRnzudC894BVwIcaYsOFC6gRXHsj225jMnik3D64viiaO63ju8C",
	"5kH5f8XyWVj+9jlzMNW2I80TBYITB6mAw0zOUbXowUJSAVQgZKMIMh/SHOXcbyr8LqOdJDlHaIu8g2UE",
	"qyhwvO3kx5AH2Z3qId7rTGxi4ZvjlSmb/jLDHtD3W2go35ZXSGi90prhklcm9II7fIe3k/d4lSR3/Opm",
	"Im6uJpNcXN3eTd5j8o4nb38VzPcWloYewKKuqWSCHXMd7V3TVNuK067vRSfzwPgFs6B3gnjNgwvyoKPx",
	"IxI81BV0oxPoaQA9sAeVVpK0v0ggy+dYnlLqn9w5PsPQ9WOyeThvvnL57+rzQpYlOFmZctXGKhAawOtw",
	"DWVUNn/s1+xsxA5Zf87OcbDcBRMbaGtbspQVRCaN41LnvCz8/OE5akXWR55uvcjPzTadAb4RTLjDawhD",
	"U/C87TVAC73rL+HzOZzVfEBHYNFYdKjIJysHw8sKtCzBtw8Kl9hqXe/y5/y8tYkGnflGLfPIzOOOecbA",
	"/8xMK/1cZM6YNGDR5bX3ElufU8q/t62f+BJG3XGhjbPNePNPAAAA//9VtMf1nRIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
